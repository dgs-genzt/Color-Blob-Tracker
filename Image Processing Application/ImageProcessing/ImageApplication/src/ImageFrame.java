/*
	A basic extension of the java.awt.Frame class
 */

import java.awt.*;
import java.io.*;
import java.awt.image.*;
import java.math.*;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.imageio.ImageIO;

//import symantec.itools.multimedia.ImageViewer;
public class ImageFrame extends Frame
{
   
    Image img;  //spatial image
    boolean verbose=false;
    static int flg = 0;
    static int flg1 = 0;
   
    ImageData backupImage, activeImage, contrastImage;
   
 //{{DECLARE_MENUS
 	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
 	java.awt.Menu menu1 = new java.awt.Menu();
 	java.awt.MenuItem miSave = new java.awt.MenuItem();
 	java.awt.MenuItem miHide = new java.awt.MenuItem();
 	java.awt.MenuItem miundo = new java.awt.MenuItem();
 	java.awt.Menu menu2 = new java.awt.Menu();
 	java.awt.Menu menu3 = new java.awt.Menu();
 	java.awt.MenuItem miThershold = new java.awt.MenuItem();
 	java.awt.MenuItem miNegative = new java.awt.MenuItem();
 	java.awt.MenuItem miEdgedetection = new java.awt.MenuItem();
 	java.awt.MenuItem miContrastsketch = new java.awt.MenuItem();
 	JSlider slider = new JSlider(JSlider.HORIZONTAL,0, 510, 255);
 	//}}
   
   
	public ImageFrame()
	{
	    
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.white);
		setForeground(java.awt.Color.black);
		setSize(281,285);
		setVisible(false);
		button_Hide.setLabel("Hide");
		add(button_Hide);
		button_Hide.setBackground(java.awt.Color.lightGray);
		button_Hide.setBounds(0,0,48,24);
		add(imageViewer);
		imageViewer.setBounds(75,75,250,250);
		saveFileDialog1.setMode(FileDialog.SAVE);
		saveFileDialog1.setTitle("Save");
		saveFileDialog1.setFile("*.jpg");
		add(slider);
		slider.setBounds(70, 10,500, 35);
		slider.setMajorTickSpacing(50);
		slider.setPaintTicks(true);
		slider.setPaintLabels(true);
		slider.setVisible(false);
		//$$ saveFileDialog1.move(0,0);
		
		setTitle("Input");
		//}}

		//{{INIT_MENUS
		menu1.setLabel("File");
		menu1.add(miSave);
		menu2.setLabel("Edit");
		menu2.add(miundo);
		menu3.setLabel("Process");
		menu3.add(miNegative);
		miThershold.setLabel("Threshold");
		miNegative.setLabel("Negative");
		miEdgedetection.setLabel("Edge Detection");
		miContrastsketch.setLabel("Contrast Strech");
		menu3.add(miThershold);
		menu3.add(miEdgedetection);
		menu3.add(miContrastsketch);
		miSave.setLabel("Save Raw Data");
		miSave.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		miundo.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_Z,false));
		menu1.add(miHide);
		miundo.setLabel("Undo");
		miHide.setLabel("Hide");
		mainMenuBar.add(menu1);
		mainMenuBar.add(menu2);
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(48,0);
		setMenuBar(mainMenuBar);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		button_Hide.addActionListener(lSymAction);
		miSave.addActionListener(lSymAction);
		miHide.addActionListener(lSymAction);
		miundo.addActionListener(lSymAction);
		miNegative.addActionListener(lSymAction);
		miThershold.addActionListener(lSymAction);
		miEdgedetection.addActionListener(lSymAction);
		miContrastsketch.addActionListener(lSymAction);
		
		
		
		SymItem lSymItem = new SymItem();
		//}}
	}

	public ImageFrame(String title)
	{
		this();
		setTitle(title);
	}
	/**
	 *Stores the spatial image in case want to toggle
	 * the display between this and wavelet image
	 */
	public void setImage(Image image, int flag)
	{  img = image;
	flg = flag;
	int H = img.getHeight(null);
	int W = img.getWidth(null);
	
	try {
		activeImage = new ImageData(img,"JPEG",H,W);
			
	} catch (IOException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	if (flg == 0){
	try {
		System.out.println("setting backup image");
		backupImage = new ImageData(img,"JPEG",H,W);
		contrastImage = new ImageData(img,"JPEG",H,W);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
			flg++ ;}
	
	
	//System.out.println("Going to set image)");
	   try{
		   ImageIcon imageIcon = new ImageIcon(image);
	       
		   imagejLabel.setIcon(imageIcon);
		   imagejLabel.setSize(image.getWidth(this),image.getHeight(this));
		 
		

	  //  imageViewer.setImage(img);
	      imageViewer.removeAll();
	      imageViewer.add(imagejLabel); 
	      imageViewer.validate();
	    }catch(Exception e)
	    { }
	    try{
	        imageViewer.setSize(img.getWidth(this),img.getHeight(this));
	        this.setSize(img.getWidth(this)+200, img.getHeight(this)+200);
	        repaint();       
	    } catch(Exception e) {}   
	}    
	
	
	   
	   
	/**
	 *Stores the currently displayed image data into
	 * a file as raw GREYSCALE image data format
	 */
	public void storeGreyscaleImage(String filename)throws IOException
	{ 
	  
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	    
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, rows);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
         
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            
            if(verbose)
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte((int)((red+green+blue)/3));	
 	        
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }
    
    
    /**
	 *Stores the currently displayed image data into
	 * a file as COLOR raw image data format
	 */
	public void storeColorImage(String filename)throws IOException
	{ 
	    
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	   
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, cols);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
        System.out.println("...storing as color, "+rows +" x " + cols);
        
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            if(verbose)//verbose
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte(red);
 	        DO.writeByte(green);
 	        DO.writeByte(blue);
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }
    

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ImageFrame()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Button button_Hide = new java.awt.Button();
	//symantec.itools.multimedia.ImageViewer imageViewer = new symantec.itools.multimedia.ImageViewer();
	javax.swing.JScrollPane imageViewer = new javax.swing.JScrollPane();
	javax.swing.JLabel imagejLabel = new JLabel();
	java.awt.FileDialog saveFileDialog1 = new java.awt.FileDialog(this);

	//}}

	

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				ImageFrame_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == button_Hide)
				buttonHide_ActionPerformed(event);
			else if (object == miSave)
				miSave_ActionPerformed(event);
			else if (object == miHide)
				miHide_ActionPerformed(event);
			else if (object == miundo)
				miundo_ActionPerformed(event);
			else if (object == miNegative)
				miNegative_ActionPerformed(event);
			else if (object == miThershold)
				miThershold_ActionPerformed(event);
			else if (object == miEdgedetection)
				miEdgedetection_ActionPerformed(event);
			else if (object == miContrastsketch)
				miContrastsketch_ActionPerformed(event);
			
			
		}
	}

	void miNegative_ActionPerformed(java.awt.event.ActionEvent event)
	{
		BufferedImage bi = imageToBufferedImage(img);
		     System.out.println("in Negative") ;
	      for (int x = 0; x < bi.getWidth(null); x++) {
	            for (int y = 0; y < bi.getHeight(null); y++) {
	                int rgba = bi.getRGB(x, y);
	                Color col = new Color(rgba, true);
	                col = new Color(255 - col.getRed(),
	                                255 - col.getGreen(),
	                                255 - col.getBlue());
	                bi.setRGB(x, y, col.getRGB());
	            }
	        }
	      
	     img = bufferedImagetoImage(bi);
	      
	      setImage(img,1);
	      

	}
	
	void miThershold_ActionPerformed(java.awt.event.ActionEvent event)
	{
		int r, g, b, MONO_THRESHOLD = 0;
		BufferedImage bi = imageToBufferedImage(img);
	     System.out.println("in Thershold") ;
	     MONO_THRESHOLD =  Integer.parseInt(JOptionPane.showInputDialog("Enter a value"));
	     
     for (int x = 0; x < bi.getWidth(null); x++) {
           for (int y = 0; y < bi.getHeight(null); y++) {
               int rgba = bi.getRGB(x, y);
               
               Color col = new Color(rgba, true);              
                            
               if(col.getRed() < MONO_THRESHOLD)
               {
            	   r=0;
               }
               else 
               {
            	   r=255;
               }
               
               if(col.getGreen() < MONO_THRESHOLD)
               {
            	   g=0;
               }
               else 
               {
            	   g=255;
               }
               
               if(col.getBlue() < MONO_THRESHOLD)
               {
            	   b=0;
               }
               else 
               {
            	   b=255;
               }
               
               
               
               col = new Color(r, g, b);
               bi.setRGB(x, y, col.getRGB());
           }
       }
     
     img = bufferedImagetoImage(bi);
     
     setImage(img,1);
   
		
	}
	
	void miEdgedetection_ActionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			activeImage = new ImageData(img,"JPEG",img.getHeight(null),img.getWidth(null),0);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			Image	I = activeImage.Sobel();
		setImage(I,1);
		
				
	}
	
	void miContrastsketch_ActionPerformed(java.awt.event.ActionEvent event)
	{		
		slider.setVisible(true);
		
		Image in = contrastImage.createImage();
		setImage(in,1);
		System.out.println("in contrast");
		
		slider.addChangeListener(new ChangeListener() 
		{ 
			 		 
			   @Override public void stateChanged(ChangeEvent e) 
			   { BufferedImage bf,af;
			   //System.out.println("in slider");
			      if (slider.getValueIsAdjusting())
			      { 
			    	  Image i = contrastImage.createImage();
			  		
			  		bf= imageToBufferedImage(i);
			  		af = activeImage.writeColorImageValueToFile(bf,slider.getValue());
			  		
			  		i = bufferedImagetoImage(af);
			  		setImage(i,1);
			      } 
			   } 
			});
		
		//int hist = Integer.parseInt(JOptionPane.showInputDialog("Enter a value between 0 - 255"));
		
		
		// to do: code goes here.
	
		
	}
	
		
	void buttonHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}

    /**
      *Save Image data in raw format
      */
	void miSave_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		String Save_filename;	 
			 
		//{{CONNECTION
		// Show the SaveFileDialog
		saveFileDialog1.setVisible(true);
		//}}
		
		//GET FILENAME
		Save_filename = (saveFileDialog1.getDirectory()).concat(saveFileDialog1.getFile()); 
		System.out.println("Save info: " + Save_filename);
		
		//Store currently displayed info
		try {
    		//storeColorImage(Save_filename);
			
			BufferedImage image = imageToBufferedImage(img);
			ImageIO.write(image, "jpg",new File(Save_filename));
			
        } catch (IOException e)
        {}
	}

	
	/* ****************************************** Begining of my necessary Code ************************************************** */
	
	public static BufferedImage imageToBufferedImage(Image im) {
	     BufferedImage bi = new BufferedImage
	        (im.getWidth(null),im.getHeight(null),BufferedImage.TYPE_INT_RGB);
	     Graphics bg = bi.getGraphics();
	     bg.drawImage(im, 0, 0, null);
	     bg.dispose(); 
	     return bi;
	  }
	
	public Image bufferedImagetoImage(BufferedImage bi) {
	    return Toolkit.getDefaultToolkit().createImage(bi.getSource());
	}
	
	public double[][] picToInt(BufferedImage img)
	{
	try 
	{
	   // BufferedImage img= ImageIO.read(file);
	    Raster raster=img.getData();
	    int w=raster.getWidth(),h=raster.getHeight();
	    double pixels[][]=new double[w][h];
	    for (int x=0;x<w;x++)
	    {
	        for(int y=0;y<h;y++)
	        {
	            pixels[x][y]=raster.getSample(x,y,0);
	        }
	    }

	    return pixels;

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return null;
	}
	
	public Image intToPic(double matrix [][])
	{
		Image I;
		int data;
		BufferedImage bufferedImage = new BufferedImage(matrix.length, matrix[0].length, BufferedImage.TYPE_INT_RGB);
	    for (int i = 0; i < matrix.length; i++) {
	        for (int j = 0; j < matrix[0].length; j++) {
	        	double pixel=matrix[i][j];
	            System.out.println("The pixel in Matrix: "+pixel);
	            data = (int)pixel;
	            bufferedImage.setRGB(i, j, data);
	            System.out.println("The pixel in BufferedImage: "+bufferedImage.getRGB(i, j));
	        }
	    }
		
	    I = bufferedImagetoImage(bufferedImage);
	    
		return I;
	}
	
	/* ************************************************************************Ending of My Necessary Code*************************************************** */ 
	
	
	void miHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}
	
	void miundo_ActionPerformed(java.awt.event.ActionEvent event)
	{
		activeImage = backupImage;
		System.out.println("Doing Undo ");
		setImage(activeImage.createImage(),1);
		
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
		}
	}
	

	void ImageFrame_WindowOpened(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}
}
